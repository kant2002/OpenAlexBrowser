@page "/"
@using OpenAlexNet;
@inject OpenAlexApi openAlex

<PageTitle>Index</PageTitle>

<h1>Hello, OpenAlex!</h1>

<form class="row g-3">
    <div class="col-12">
        <InputText id="search" @bind-Value="@SearchField" class="form-control" placeholder="Author name to find" aria-label="Search field" />
    </div>
    <div class="col-12">
        <button type="submit" class="btn btn-primary" @onclick="Search">Search</button>
    </div>
</form>

@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
@if (foundAuthors is not null)
{
    @foreach (var author in foundAuthors)
    {
        <AuthorShortInformation Author="author" />
        if (!foundWorks.TryGetValue(author.Id, out var works))
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            @foreach (var work in works.OrderByDescending(_ => _.PublicationDate))
            {
                <WorkShortInformation Work="work" />
            }
        }
    }
}
@code {
    string? SearchField { get; set; }
    bool loading;

    List<Author>? foundAuthors;
    Dictionary<string, List<Work>> foundWorks = new();

    async Task Search()
    {
        if (SearchField is null)
        {
            return;
        }

        loading = true;
        try
        {
            foundAuthors = null;
            foundWorks = new();
            var authors = await openAlex.SearchAuthorsAsync(SearchField);
            if (authors is null)
            {
                return;
            }

            StateHasChanged();
            foundAuthors = authors.Results;
            foreach (var author in foundAuthors)
            {
                var authorWorks = await openAlex.FindWorksByAuthorAsync(author.Id);
                if (authorWorks is null)
                {
                    continue;
                }

                foundWorks.Add(author.Id, authorWorks.Results);
                StateHasChanged();
            }
        }
        finally
        {
            loading = false;
        }
    }
}