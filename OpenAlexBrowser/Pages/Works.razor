@page "/works"
@using OpenAlexNet;
@using System.Text.Json;
@inject OpenAlexApi openAlex
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
<h1>
    Works
    @if (loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</h1>

<form class="row g-3" @onsubmit=Search>
    <div class="col-4">
        <InputText id="search" @bind-Value="@SearchField" class="form-control" placeholder="Organiation name to find" aria-label="Search field" />
    </div>
    <div class="col-2">
        <InputText id="search" @bind-Value="@Ror" class="form-control" placeholder="Organization ROR" aria-label="ROR of organization which publish work" />
    </div>
    <div class="col-2">
        <InputText id="search" @bind-Value="@Funder" class="form-control" placeholder="Funder" aria-label="Id of organization which fund work" />
    </div>
    <div class="col-2">
        <InputText @bind-Value="@MinimumYear" list="datalistYears" class="form-control" placeholder="Minimum year" aria-label="Search field" />
        <datalist id="datalistYears">
            @for (var year = 2010; year <= DateTime.UtcNow.Year; year++)
            {
                <option value="@year" />
            }
        </datalist>
    </div>
    <div class="col-2">
        <InputText @bind-Value="@MaximumYear" list="datalistYears" class="form-control" placeholder="Maximum year" aria-label="Search field" />
        <datalist id="datalistYears">
            @for (var year = 2010; year <= DateTime.UtcNow.Year; year++)
            {
                <option value="@year" />
            }
        </datalist>
    </div>
    <div class="col-12">
        <div class="form-check">
            <InputCheckbox class="form-check-input" type="checkbox" id="fuzzySearch" @bind-Value="@fuzzySearch" />
            <label class="form-check-label" for="fuzzySearch">
                Indirect search via parsed affiliations
            </label>
        </div>
    </div>
    <div class="col-4">
        <button type="submit" class="btn btn-primary">Search</button>
        <button type="button" class="btn btn-secondary" @onclick="Export">Export to JSON</button>
        <button type="button" class="btn btn-secondary" @onclick="CheckCount">Check Count</button>
    </div>
    <div class="col-3">
        <InputText @bind-Value="@WorkId" class="form-control" placeholder="OpenAlex Work Id" aria-label="OpenAlex Work id" />
    </div>
    <div class="col-5">
        <button type="button" class="btn btn-secondary" @onclick="SearchWork">Search Work</button>
    </div>
</form>

@if (foundWorks is not null)
{
    int lastYear = 0;
    var years = foundWorks.Select(_ => _.PublicationYear ?? 0).Distinct().Where(_ => _ != 0).OrderBy(_ => _).ToList();
    <p>Found: @foundWorks.Count out of @expectedCount works</p>
    <ul class="nav">
        @foreach (var year in years)
        {
            <li class="nav-item">
                <a class="nav-link" href="@("#years-" + year)">@year</a>
            </li>
        }
        @if (loading)
        {
            <li class="nav-item">
                <a class="nav-link">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </a>
            </li>
        }
    </ul>

    @if (foundWorks.Count > 100)
    {
        <nav aria-label="Search results pagination">
            <ul class="pagination">
                @* <li class="page-item">
                <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li> *@
                @for (var i = 0; i < (foundWorks.Count + 99) / 100; i++)
                {
                    <li class="page-item"><a class="page-link @(i == currentUiPage ? "active" : null)" href="#" @onclick=@(() => SetPage(i))>@(i + 1)</a></li>
                }
                @* <li class="page-item">
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li> *@
            </ul>
        </nav>
    }

var sortedWorks = foundWorks.OrderByDescending(_ => _.PublicationDate).ToList();
    foreach (var work in sortedWorks.Skip(currentUiPage * 100).Take(100))
    {
        if (lastYear < (work.PublicationYear ?? 0))
        {
            lastYear = work.PublicationYear ?? 0;
            <h2 id="@("year-" + lastYear)">@lastYear</h2>
        }

        <WorkShortInformation Work="work" />
    }
}

@code {
    [SupplyParameterFromQuery(Name = "search")]
    [Parameter]
    public string? SearchField { get; set; }

    [SupplyParameterFromQuery(Name = "ror")]
    [Parameter]
    public string? Ror { get; set; }

    [SupplyParameterFromQuery(Name = "funder")]
    [Parameter]
    public string? Funder { get; set; }
    public string? WorkId { get; set; }

    string? MinimumYear { get; set; }
    string? MaximumYear { get; set; }
    bool loading;
    bool fuzzySearch = true;
    int expectedCount;
    int currentUiPage;
    List<Work>? foundWorks;

    void SetPage(int page)
    {
        currentUiPage = page;
    }

    async Task CheckCount()
    {
        if (SearchField is null && Ror is null && Funder is null)
        {
            return;
        }

        foundWorks = null;
        loading = true;

        try
        {
            expectedCount = 0;
            int page = 1;
            currentUiPage = 0;
            WorksFilter filter = new WorksFilter();
            if (int.TryParse(MinimumYear, out var minimumYear))
            {
                filter.FromPublicationDate(new DateOnly(minimumYear, 1, 1));
            }

            if (int.TryParse(MaximumYear, out var maximumYear))
            {
                filter.ToPublicationDate(new DateOnly(maximumYear, 12, 31));
            }

            if (!string.IsNullOrWhiteSpace(Ror))
            {
                filter.ByInstitutionsRor(Ror);
            }

            if (!string.IsNullOrWhiteSpace(Funder))
            {
                filter.FilterBy("grants.funder", Funder);
            }

            if (SearchField is not null)
            {
                if (fuzzySearch)
                {
                    filter.SearchRawAffiliationString(SearchField);
                }
                else
                {
                    var institutions = await openAlex.SearchInstitutionsAsync(SearchField);
                    if (institutions is null)
                    {
                        return;
                    }

                    filter.ByInstitutionsId(institutions.Results.Take(50).Select(i => i.Id.Replace("https://openalex.org/", "")));
                }
            }

            var works = await openAlex.FindWorksAsync(filter, page);
            if (works is null)
            {
                return;
            }

            expectedCount = works.Meta.Count ?? 0;
            foundWorks = new();
        }
        finally
        {
            loading = false;
        }
    }

    async Task Search()
    {
        if (SearchField is null && Ror is null && Funder is null)
        {
            return;
        }

        foundWorks = null;
        loading = true;

        try
        {
            expectedCount = 0;
            int page = 1;
            WorksFilter filter = new WorksFilter();
            if (int.TryParse(MinimumYear, out var minimumYear))
            {
                filter.FromPublicationDate(new DateOnly(minimumYear, 1, 1));
            }

            if (!string.IsNullOrWhiteSpace(Ror))
            {
                filter.ByInstitutionsRor(Ror);
            }

            if (!string.IsNullOrWhiteSpace(Funder))
            {
                filter.FilterBy("grants.funder", Funder);
            }

            if (SearchField is not null)
            {
                if (fuzzySearch)
                {
                    filter.SearchRawAffiliationString(SearchField);
                }
                else
                {
                    var institutions = await openAlex.SearchInstitutionsAsync(SearchField);
                    if (institutions is null)
                    {
                        return;
                    }

                    filter.ByInstitutionsId(institutions.Results.Take(50).Select(i => i.Id.Replace("https://openalex.org/", "")));
                }
            }

            var perPage = 50;
            var works = await openAlex.FindWorksAsync(filter, page, perPage);
            if (works is null)
            {
                return;
            }

            expectedCount = works.Meta.Count ?? 0;
            foundWorks = new();
            while (works.Meta.PerPage * works.Meta.Page < works.Meta.Count)
            {
                foundWorks.AddRange(works.Results);
                StateHasChanged();

                page++;
                works = await openAlex.FindWorksAsync(filter, page, perPage);
                if (works is null)
                {
                    return;
                }
            }

            foundWorks.AddRange(works.Results);
        }
        finally
        {
            loading = false;
        }
    }

    async Task Export()
    {
        if (foundWorks is null)
        {
            return;
        }

        var fileStream = new MemoryStream();
        JsonSerializer.Serialize(fileStream, foundWorks);
        fileStream.Position = 0;
        var fileName = "works.json";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    void SearchWork()
    {
        NavigationManager.NavigateTo($"work/{WorkId}");
    }
}
