@page "/works"
@using OpenAlexNet;
@inject OpenAlexApi openAlex
<h1>
    Works
    @if (loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</h1>

<form class="row g-3" @onsubmit=Search>
    <div class="col-8">
        <InputText id="search" @bind-Value="@SearchField" class="form-control" placeholder="Organiation name to find" aria-label="Search field" />
    </div>
    <div class="col-4">
        <InputText @bind-Value="@MinimumYear" list="datalistYears" class="form-control" placeholder="Minimum year" aria-label="Search field" />
        <datalist id="datalistYears">
            @for (var year = 2010; year <= DateTime.UtcNow.Year; year++)
            {
                <option value="@year" />
            }
        </datalist>
    </div>
    <div class="col-12">
        <div class="form-check">
            <InputCheckbox class="form-check-input" type="checkbox" id="fuzzySearch" @bind-Value="@fuzzySearch" />
            <label class="form-check-label" for="fuzzySearch">
                Indirect search via parsed affiliations
            </label>
        </div>
    </div>
    <div class="col-12">
        <button type="submit" class="btn btn-primary" @onclick="Search">Search</button>
    </div>
</form>

@if (foundWorks is not null)
{
    int lastYear = 0;
    var years = foundWorks.Select(_ => _.PublicationYear ?? 0).Distinct().Where(_ => _ != 0).OrderBy(_ => _).ToList();
    <p>Found: @expectedCount works</p>
    <ul class="nav">
        @foreach (var year in years)
        {
            <li class="nav-item">
                <a class="nav-link" href="@("#years-" + year)">@year</a>
            </li>
        }
        @if (loading)
        {
            <li class="nav-item">
                <a class="nav-link">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </a>
            </li>
        }
    </ul>

    @foreach (var work in foundWorks.OrderByDescending(_ => _.PublicationDate))
    {
        if (lastYear < (work.PublicationYear ?? 0))
        {
            lastYear = work.PublicationYear ?? 0;
            <h2 id="@("year-" + lastYear)">@lastYear</h2>
        }

        <WorkShortInformation Work="work" />
    }
}

@code {
    string? SearchField { get; set; }
    string? MinimumYear { get; set; }
    bool loading;
    bool fuzzySearch = true;
    int expectedCount;
    List<Work>? foundWorks;

    async Task Search()
    {
        if (SearchField is null)
        {
            return;
        }

        foundWorks = null;
        loading = true;

        try
        {
            expectedCount = 0;
            int page = 1;
            WorksFilter filter = new WorksFilter();
            if (int.TryParse(MinimumYear, out var minimumYear))
            {
                filter.FromPublicationDate(new DateOnly(minimumYear, 1, 1));
            }

            if (fuzzySearch)
            {
                filter.SearchRawAffiliationString(SearchField);
            }
            else
            {
                var institutions = await openAlex.SearchInstitutionsAsync(SearchField);
                if (institutions is null)
                {
                    return;
                }

                filter.ByInstitutionsId(institutions.Results.Take(50).Select(i => i.Id.Replace("https://openalex.org/", "")));
            }

            var works = await openAlex.FindWorksAsync(filter, page);
            if (works is null)
            {
                return;
            }

            expectedCount = works.Meta.Count ?? 0;
            foundWorks = new();
            while (works.Meta.PerPage * works.Meta.Page < works.Meta.Count)
            {
                foundWorks.AddRange(works.Results);
                StateHasChanged();

                page++;
                works = await openAlex.FindWorksAsync(filter, page);
                if (works is null)
                {
                    return;
                }
            }

            foundWorks.AddRange(works.Results);
        }
        finally
        {
            loading = false;
        }
    }

}
