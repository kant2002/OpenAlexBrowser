@page "/works"
@using OpenAlexNet;
@inject OpenAlexApi openAlex
<h3>
    Works
    @if (loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
</h3>

<label for="search">Enter search criteria</label>
<InputText id="search" @bind-Value="@SearchField" class="form-control" />

<button class="btn btn-primary" @onclick="Search">Search</button>


@if (foundWorks is not null)
{
    <p>Found: @foundWorks.Count works</p>
    @foreach (var work in foundWorks.OrderByDescending(_ => _.PublicationDate))
    {
        <WorkShortInformation Work="work" />
    }
}

@code {
    string? SearchField { get; set; }
    bool loading;
    List<Work>? foundWorks;

    async Task Search()
    {
        if (SearchField is null)
        {
            return;
        }

        foundWorks = null;
        loading = true;

        try
        {
            int page = 1;
            var works = await openAlex.FindWorksByAffiliationAsync(SearchField, page);
            foundWorks = new();
            while (works.Meta.PerPage * works.Meta.Page < works.Meta.Count)
            {
                foundWorks.AddRange(works.Results);
                //PrintWorks(works.Results);
                page++;
                works = await openAlex.FindWorksByAffiliationAsync(SearchField, page);
            }

            foundWorks.AddRange(works.Results);
        }
        finally
        {
            loading = false;
        }
    }

}
